(def! load-file 
  (fn* (f) 
       (eval 
        (read-string 
         (str "(do " (slurp f) "\nnil)")))))

(defn! zero? [num] (if (= num 0) true false))

(defn! inc [num] (+ num 1))

(defn! dec [num] (- num 1))

(defn! even? [num] (zero? (mod num 2)))

(defn! odd? [num] (not (even? num)))

(defn! reduce [func context sequence]
  (if (empty? sequence) 
    context 
    (reduce func (func context (first sequence)) (rest sequence))))

(defn! map [func sequence]
  (let* [new-fun (fn* [context element] (cons (func element) context))]
        (reverse (reduce new-fun (list) sequence))))